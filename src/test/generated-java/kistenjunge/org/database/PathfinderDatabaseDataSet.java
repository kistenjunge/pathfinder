package kistenjunge.org.database;

import com.seitenbau.stu.database.dsl.DataSetIdentificator;
import com.seitenbau.stu.database.dsl.DataSetRegistry;
import com.seitenbau.stu.database.extend.DatasetIdGenerator;
import com.seitenbau.stu.database.extend.DbUnitDatasetFactory;
import com.seitenbau.stu.database.extend.impl.DefaultIdGenerator;
import com.seitenbau.stu.database.util.DbCompare;
import com.seitenbau.stu.util.DateUtil;
import com.seitenbau.stu.util.date.DateBuilder;
import kistenjunge.org.database.ProjectTable.RowBuilder_Project;
import org.dbunit.dataset.DefaultDataSet;
import org.dbunit.dataset.IDataSet;

import java.util.Date;

/**
 * {@link DbUnitDatasetFactory} factory to create in-memory
 * {@link IDataSet} for your Database.
 * Represents a PathfinderDatabase dataset. Provides a plain Java builder API to
 * model the test data.
 * <p/>
 * The model contains the following tables:
 * <ul>
 * <li>
 * {@link ProjectTable} - The project table<br>
 * </li>
 * </ul>
 * <p/>
 * <p/>
 * This class is generated by {@link kistenjunge.org.database.PathfinderDatabaseModel#main }
 */
public abstract class PathfinderDatabaseDataSet implements DbUnitDatasetFactory, DataSetIdentificator
{
  /**
   * Now at time of creation, This is 'fixed' so the time can be used when
   * adding multiple lines, it's still kind of 'now' but can be predicted.
   */
  // TODO NM rename this variable
  DateBuilder _currentTime = DateUtil.datum();

  /**
   * Reference to an {@link DatasetIdGenerator}. Used to set IDs.
   * See Flags when adding an column in your model to create nextId()
   * methods.
   */
  DatasetIdGenerator _idGenerator;

  // All Tables as instances ( see {@link #prepareTables} for init code ) 

  /**
   * The project table
   * <p/>
   * <p/>
   * Use {@link ProjectTable#insertRow()} to model tables with the plain Java builder API.
   * <p/>
   * To search for rows, use {@link ProjectTable#findWhere}, {@link ProjectTable#getWhere}
   * or {@link ProjectTable#find}.
   * <p/>
   * See {@link PathfinderDatabaseDataSet} for an overview over all tables.
   */
  public ProjectTable table_Project = new ProjectTable();

  /**
   * Create a new instance of this DbUnitDatasetFactory. This
   * will create all tables and invoke the template methods to
   * modify the DataSet content.<br/>
   * To inject your own data use the initDataSet() method.
   */
  public PathfinderDatabaseDataSet()
  {
    DataSetIdentificator lastDataSet = DataSetRegistry.use(this);
    prepareTables();
    beforeInitDataSet();
    initDataSet();
    afterInitDataSet();
    DataSetRegistry.use(lastDataSet);
  }

  /**
   * Create the actual DBUnit IDataSet.
   */
  public IDataSet createDBUnitDataSet()
  {
    beforeDataSetCreation();
    try
    {
      DefaultDataSet dataSet = new DefaultDataSet();
      dataSet.addTable(table_Project);
      table_Project.resetIterator();
      afterDataSetCreation(dataSet);
      return finalModify(dataSet);
    }
    catch (org.dbunit.database.AmbiguousTableNameException e)
    {
      throw new RuntimeException(e);
    }
  }

  /**
   * Injection point. Last processing template method to modify the resulting
   * Dataset created by createDBUnitDataSet().
   * You should really know what you're doing!
   *
   * @param dataSet
   * @return
   */
  protected DefaultDataSet finalModify(DefaultDataSet dataSet)
  {
    return dataSet;
  }

  /**
   * Template Method, get's called after createDBUnitDataSet() method
   * Use this only if really needed.
   */
  protected void afterDataSetCreation(DefaultDataSet dataSet)
      throws org.dbunit.database.AmbiguousTableNameException
  {
  }

  /**
   * Template Method, get's called before createDBUnitDataSet() method.
   * Use this only if really needed.
   */
  protected void beforeDataSetCreation()
  {
  }

  /**
   * Template Method, got called after the initDataSet() method
   */
  protected void afterInitDataSet()
  {
  }

  /**
   * Inner method to prepare the table instances.
   * Do not overwrite.
   */
  protected void prepareTables()
  {
    table_Project.setDataset(this);
  }

  /**
   * Template Method, got called before the initDataSet() method
   */
  protected void beforeInitDataSet()
  {
  }

  /**
   * Initialize the content of your Dataset here.
   */
  abstract protected void initDataSet();

  /**
   * Compare the given Date to be 'equal' around (+-15s).
   */
  public Date around(DateBuilder datum)
  {
    return DbCompare.warp(datum);
  }

  /**
   * <p>
   * Create org get the 'current' timestamp as DateBuilder.
   * Subsequent calls will give you the same builder and TIME again!
   * This allows you to use the same "now" for the whole dataset.<br>
   * <b>!!But be aware that this will be a fixed now, of the time where the
   * Factory was created!!</b>
   * </p>
   */
  public DateBuilder currentTime()
  {
    return _currentTime;
  }

  /**
   * Change the used id generator
   */
  public void setIdGenerator(DatasetIdGenerator gen)
  {
    _idGenerator = gen;
  }

  /**
   * Return the current active {@link DatasetIdGenerator}
   */
  public DatasetIdGenerator getIdGenerator()
  {
    if (_idGenerator == null)
    {
      _idGenerator = new DefaultIdGenerator();
    }
    return _idGenerator;
  }

  /**
   * run the given modifiers on this dataset
   */
  public PathfinderDatabaseDataSet modify(PathfinderDatabaseDataSetModifier... modifiers)
  {
    // TODO NM/CB think about this statement: Can modifiers ever be null? oO
    if (modifiers == null)
    {
      return this;
    }
    for (PathfinderDatabaseDataSetModifier modifier : modifiers)
    {
      modifier.modify(this);
    }
    return this;
  }

  /**
   * Interface for the double dispatch. Used by {@link #modify} to
   * extract creation logic into an external strategy.
   */
  public interface PathfinderDatabaseDataSetModifier
  {
    void modify(PathfinderDatabaseDataSet dataset);
  }
  
  /* ************************************************************ */
  /* *             convenient add(*) methods                    * */
  /* ************************************************************ */

  /**
   * Adds the given row into the Table 'project'
   */
  public RowBuilder_Project add(RowBuilder_Project row)
  {
    return table_Project.insertRow(row);
  }

  /**
   * Adds the given row into the Table 'project'
   */
  public RowBuilder_Project add(ProjectModel row)
  {
    return table_Project.insertRow(row);
  }

  /**
   * ! work in progress !
   * create a new Model of the Type ProjectModel with
   * the same IdGenerator that this Dataset
   */
  /*
  public ProjectModel createProject() 
  {
    ProjectModel model = new ProjectModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  @Override
  public String getDataSetClassName()
  {
    return "kistenjunge.org.database.PathfinderDatabase";
  }

  @Override
  public Object getDataSet()
  {
    return this;
  }

}
